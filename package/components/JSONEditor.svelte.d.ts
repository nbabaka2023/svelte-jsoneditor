import { SvelteComponent } from "svelte";
import type { Content, ContentErrors, JSONEditorPropsOptional, JSONEditorSelection, JSONParser, JSONPatchResult, JSONPathParser, OnBlur, OnChange, OnChangeMode, OnChangeQueryLanguage, OnClassName, OnError, OnExpand, OnFocus, OnRenderMenu, OnRenderValue, OnSelect, QueryLanguage, TransformModalOptions, Validator } from '../types';
import { Mode } from '../types.js';
import type { JSONPatchDocument, JSONPath } from 'immutable-json-patch';
import type { OnRenderContextMenu } from '../types.js';
declare const __propDef: {
    props: {
        content?: Content | undefined;
        selection?: JSONEditorSelection | null | undefined;
        readOnly?: boolean | undefined;
        indentation?: string | number | undefined;
        tabSize?: number | undefined;
        mode?: Mode | undefined;
        mainMenuBar?: boolean | undefined;
        navigationBar?: boolean | undefined;
        statusBar?: boolean | undefined;
        askToFormat?: boolean | undefined;
        escapeControlCharacters?: boolean | undefined;
        escapeUnicodeCharacters?: boolean | undefined;
        flattenColumns?: boolean | undefined;
        parser?: JSONParser | undefined;
        validator?: Validator | null | undefined;
        validationParser?: JSONParser | undefined;
        pathParser?: JSONPathParser | undefined;
        queryLanguages?: QueryLanguage[] | undefined;
        queryLanguageId?: string | undefined;
        onChangeQueryLanguage?: OnChangeQueryLanguage | undefined;
        onChange?: OnChange | undefined;
        onSelect?: OnSelect | null | undefined;
        onRenderValue?: OnRenderValue | undefined;
        onClassName?: OnClassName | undefined;
        onRenderMenu?: OnRenderMenu | undefined;
        onRenderContextMenu?: OnRenderContextMenu | undefined;
        onChangeMode?: OnChangeMode | undefined;
        onError?: OnError | undefined;
        onFocus?: OnFocus | undefined;
        onBlur?: OnBlur | undefined;
        get?: (() => Content) | undefined;
        set?: ((newContent: Content) => Promise<void>) | undefined;
        update?: ((updatedContent: Content) => Promise<void>) | undefined;
        patch?: ((operations: JSONPatchDocument) => Promise<JSONPatchResult>) | undefined;
        select?: ((newSelection: JSONEditorSelection | null) => Promise<void>) | undefined;
        expand?: ((callback?: OnExpand) => Promise<void>) | undefined;
        transform?: ((options: TransformModalOptions) => void) | undefined;
        validate?: (() => ContentErrors | null) | undefined;
        acceptAutoRepair?: (() => Promise<Content>) | undefined;
        scrollTo?: ((path: JSONPath) => Promise<void>) | undefined;
        findElement?: ((path: JSONPath) => Element | null) | undefined;
        focus?: (() => Promise<void>) | undefined;
        refresh?: (() => Promise<void>) | undefined;
        updateProps?: ((props: JSONEditorPropsOptional) => Promise<void>) | undefined;
        destroy?: (() => Promise<void>) | undefined;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export type JsonEditorProps = typeof __propDef.props;
export type JsonEditorEvents = typeof __propDef.events;
export type JsonEditorSlots = typeof __propDef.slots;
export default class JsonEditor extends SvelteComponent<JsonEditorProps, JsonEditorEvents, JsonEditorSlots> {
    get get(): () => Content;
    get set(): (newContent: Content) => Promise<void>;
    get update(): (updatedContent: Content) => Promise<void>;
    get patch(): (operations: JSONPatchDocument) => Promise<JSONPatchResult>;
    get select(): (newSelection: JSONEditorSelection | null) => Promise<void>;
    get expand(): (callback?: OnExpand | undefined) => Promise<void>;
    get transform(): (options: TransformModalOptions) => void;
    get validate(): () => ContentErrors | null;
    get acceptAutoRepair(): () => Promise<Content>;
    get scrollTo(): (path: JSONPath) => Promise<void>;
    get findElement(): (path: JSONPath) => Element | null;
    get focus(): () => Promise<void>;
    get refresh(): () => Promise<void>;
    get updateProps(): (props: JSONEditorPropsOptional) => Promise<void>;
    get destroy(): () => Promise<void>;
}
export {};
